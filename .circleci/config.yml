defaults:
  environment: &env
    TRAVIS_BRANCH: $CIRCLE_BRANCH
    TRAVIS_PULL_REQUEST: $CI_PULL_REQUEST || "false"
  steps: &ci_steps
    - checkout
    - run: bin/ci prepare_system
    - run: bin/ci prepare_build
    - run: bin/ci build

version: 2

jobs:
  test_linux:
    machine: true
    environment:
      <<: *env
      TRAVIS_OS_NAME: linux
      ARCH: x86_64
      ARCH_CMD: linux64
    steps: *ci_steps

  test_linux32:
    machine: true
    environment:
      <<: *env
      TRAVIS_OS_NAME: linux
      ARCH: i386
      ARCH_CMD: linux32
      ARCH_LIBRARY_PATH: /opt/crystal/embedded/lib/
    steps: *ci_steps

  test_darwin:
    macos:
      xcode: "9.0"
    environment:
      <<: *env
      TRAVIS_OS_NAME: osx
    steps: *ci_steps

  prepare_dist:
    docker:
      - image: docker:stable-git
    steps:
      # checkout specific distribution-scripts version to perform releases and nightly
      - run: |
          git clone https://github.com/bcardiff/distribution-scripts.git ~/distribution-scripts
          cd ~/distribution-scripts
          git checkout params
      # persist relevant information for build process in different environments.
      # determine is the build is nightly or a tagged release
      - run: |
          cd ~/distribution-scripts
          touch build.env
          echo "export DOCKER_REPOSITORY=crystallang/crystal" >> build.env

          # What to build
          echo "export CRYSTAL_SHA1=$CIRCLE_SHA1" >> build.env

          # Which previous version use
          export PREVIOUS_CRYSTAL_BASE_URL="https://github.com/crystal-lang/crystal/releases/download/v0.24.1/crystal-0.24.1-2"
          echo "export PREVIOUS_CRYSTAL_RELEASE_LINUX_TARGZ=${PREVIOUS_CRYSTAL_BASE_URL}-linux-x86_64.tar.gz" >> build.env
          echo "export PREVIOUS_CRYSTAL_RELEASE_DARWIN_TARGZ=${PREVIOUS_CRYSTAL_BASE_URL}-darwin-x86_64.tar.gz" >> build.env

          # How to brand it
          echo "export CRYSTAL_VERSION=nightly" >> build.env
          echo "export PACKAGE_ITERATION=$CIRCLE_BUILD_NUM" >> build.env
          echo "export DOCKER_TAG=nightly" >> build.env

          cat build.env
      - persist_to_workspace:
          root: ../
          paths:
            - distribution-scripts

  dist_linux:
    machine: true
    steps:
      - attach_workspace:
          at: /tmp/workspace
      - run: |
          cd /tmp/workspace/distribution-scripts
          source build.env
          cd linux
          make release=true
      - persist_to_workspace:
          root: /tmp/workspace/distribution-scripts/linux/
          paths:
            - build

  dist_darwin:
    macos:
      xcode: "9.0"
    shell: /bin/bash --login -eo pipefail
    steps:
      - run:
          name: Setup environment
          command: |
            brew install pkgconfig libtool

            sudo mkdir -p /opt/crystal
            sudo chown $(whoami) /opt/crystal/
            sudo mkdir -p /var/cache
            sudo chown $(whoami) /var/cache
      - attach_workspace:
          at: /tmp/workspace
      - run:
          no_output_timeout: 40m
          command: |
            echo "2.4.2" > /tmp/workspace/distribution-scripts/.ruby-version
            cd /tmp/workspace/distribution-scripts
            source build.env
            cd omnibus
            bundle check || bundle install --binstubs
            cd ../darwin
            make
      - persist_to_workspace:
          root: /tmp/workspace/distribution-scripts/darwin/
          paths:
            - build

  dist_docker:
    machine: true
    steps:
      - attach_workspace:
          at: /tmp/workspace
      - run: |
          cd /tmp/workspace/distribution-scripts
          source build.env
          cd docker
          cp /tmp/workspace/build/crystal_${CRYSTAL_VERSION}-${PACKAGE_ITERATION}_amd64.deb crystal.deb
          make CRYSTAL_DEB=crystal.deb
      - persist_to_workspace:
          root: /tmp/workspace/distribution-scripts/docker/
          paths:
            - build

  publish_docker:
    machine: true
    steps:
      - attach_workspace:
          at: /tmp/workspace
      - run: |
          cd /tmp/workspace/distribution-scripts
          source ./build.env
          gunzip -c /tmp/workspace/build/docker-${CRYSTAL_VERSION}.tar.gz | docker image load
          gunzip -c /tmp/workspace/build/docker-${CRYSTAL_VERSION}-build.tar.gz | docker image load
          docker login -u ${DOCKER_USER} -p ${DOCKER_PASS}
          docker push ${DOCKER_REPOSITORY}:${DOCKER_TAG}
          docker push ${DOCKER_REPOSITORY}:${DOCKER_TAG}-build

  dist_docs:
    machine: true
    steps:
      - attach_workspace:
          at: /tmp/workspace
      - run: |
          cd /tmp/workspace/distribution-scripts
          source build.env
          cd docs
          gunzip -c /tmp/workspace/build/docker-${CRYSTAL_VERSION}-build.tar.gz | docker image load
          make CRYSTAL_DOCKER_IMAGE=${DOCKER_REPOSITORY}:${DOCKER_TAG}-build
      - persist_to_workspace:
          root: /tmp/workspace/distribution-scripts/docs/
          paths:
            - build

  dist_artifacts:
    docker:
      - image: buildpack-deps:xenial
    steps:
      - attach_workspace:
          at: /tmp/workspace
      - store_artifacts:
          path: /tmp/workspace/build
          destination: dist_packages

workflows:
  version: 2
  build_all_platforms:
    jobs:
      - test_linux:
          filters: &ci_filter
            branches:
              only:
                - master
                - /release\/.+/
                - /.*\bci\b.*/
            tags:
              only: /.*/
      - test_linux32:
          filters: *ci_filter
      - test_darwin:
          filters: *ci_filter
      - prepare_dist:
          filters: &nightly_filter
            branches:
              only:
                - ci/nightly
      - dist_linux:
          filters: *nightly_filter
          requires:
            - prepare_dist
      - dist_darwin:
          filters: *nightly_filter
          requires:
            - prepare_dist
      - dist_docs:
          filters: *nightly_filter
          requires:
            - dist_docker
      - dist_docker:
          filters: *nightly_filter
          requires:
            - dist_linux
      - publish_docker:
          filters: *nightly_filter
          requires:
            - dist_docker
      - dist_artifacts:
          filters: *nightly_filter
          requires:
            - dist_linux
            - dist_darwin
            - dist_docker
            - dist_docs
